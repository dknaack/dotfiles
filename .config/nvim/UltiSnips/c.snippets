snippet inc "#include" bA
#include 
endsnippet

snippet "#include io" "stdio" bA
#include <stdio.h>
endsnippet

snippet "#include li" "stdlib" bA
#include <stdlib.h>
endsnippet

snippet "#include ar" "stdarg" bA
#include <stdarg.h>
endsnippet

snippet "#include de" "stddef" bA
#include <stddef.h>
endsnippet

snippet "#include st" "string" bA
#include <string.h>
endsnippet

snippet "#include ti" "time" bA
#include <time.h>
endsnippet

snippet "#include un" "unistd" bA
#include <unistd.h>
endsnippet

snippet "#include vk" "vulkan" bA
#include <vulkan/vulkan.h>
endsnippet

snippet '^fn' "function definition" rA
${1:void}
${2:function_name}(${3:void})
{
	${0:${VISUAL}}
}
endsnippet

snippet '^dfn' "function declartion" rA
${1:void} ${2:function_name}(${3:void});
endsnippet

snippet main "main" bA
int
main(void)
{
	$0
	return 0;
}
endsnippet

snippet die "die function" 
void
die(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);

	if (fmt[0] && fmt[strlen(fmt) - 1] == ':') {
		fputc(' ', stderr);
		perror(0);
	} else {
		fputc('\n', stderr);
	}

	exit(1);
}
endsnippet

snippet ecalloc "ecalloc function" 
void *
ecalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (!(ptr = calloc(nmemb, size)))
		die("calloc:");

	return ptr;
}
endsnippet

snippet guard "header include guard" b
#ifndef $1_H
#define $1_H

$0

#endif /* $1_H */ `!p import re
if len(t[1]) > 0:
	t[1] = t[1].upper().replace(' ', '_').replace('.', '_')
`
endsnippet
