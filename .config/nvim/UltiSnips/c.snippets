snippet "^inc" "^#include" rA
#include
endsnippet

snippet "^#include as" "assert" rA
#include <assert.h>
endsnippet

snippet "^#include io" "stdio" rA
#include <stdio.h>
endsnippet

snippet "^#include li" "stdlib" rA
#include <stdlib.h>
endsnippet

snippet "^#include ar" "stdarg" rA
#include <stdarg.h>
endsnippet

snippet "^#include bo" "stdbool" rA
#include <stdbool.h>
endsnippet

snippet "^#include de" "stddef" rA
#include <stddef.h>
endsnippet

snippet "^#include st" "string" rA
#include <string.h>
endsnippet

snippet "^#include ti" "time" rA
#include <time.h>
endsnippet

snippet "^#include un" "unistd" rA
#include <unistd.h>
endsnippet

snippet "^#include vk" "vulkan" rA
#include <vulkan/vulkan.h>
endsnippet

snippet "^#include ma" "math" rA
#include <math.h>
endsnippet

snippet "^#include in" "stdint" rA
#include <stdint.h>
endsnippet

snippet main "main" bA
int
main(void)
{
	$0
	return 0;
}
endsnippet

snippet die "die function"
void
die(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);

	if (fmt[0] && fmt[strlen(fmt) - 1] == ':') {
		fputc(' ', stderr);
		perror(0);
	} else {
		fputc('\n', stderr);
	}

	exit(1);
}
endsnippet

snippet ecalloc "ecalloc function"
void *
ecalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (!(ptr = calloc(nmemb, size)))
		die("calloc:");

	return ptr;
}
endsnippet

snippet '^guard' "header include guard" rA
#ifndef $1_H
#define $1_H

$0

#endif /* $1_H */ `!p import re
if len(t[1]) > 0:
	t[1] = t[1].upper().replace(' ', '_').replace('.', '_')
`
endsnippet

snippet inttypes "int typedefs" w
typedef uintptr_t usize;
typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef intptr_t isize;
typedef int64_t i64;
typedef int32_t i32;
typedef int16_t i16;
typedef int8_t  i8;
endsnippet

snippet MAX "maximum macro" w
#define MAX(a, b) ((a) > (b)? (a) : (b))
endsnippet

snippet MIN "maximum macro" w
#define MIN(a, b) ((a) < (b)? (a) : (b))
endsnippet

snippet LENGTH "length macro" w
#define LENGTH(x) (sizeof(x)/sizeof((x)[0]))
endsnippet

snippet types "short types" w
#include <stdint.h>

typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef int64_t i64;
typedef int32_t i32;
typedef int16_t i16;
typedef int8_t  i8;

typedef double f64;
typedef float  f32;
endsnippet

snippet _fast "fast for cp" bA
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#define MAX(a, b) ((a) > (b)? (a) : (b))
#define MIN(a, b) ((a) < (b)? (a) : (b))
#define LENGTH(x) (sizeof(x)/sizeof((x)[0]))

typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef int64_t i64;
typedef int32_t i32;
typedef int16_t i16;
typedef int8_t  i8;

typedef double f64;
typedef float  f32;

int
main(void)
{
	$0
}
endsnippet
