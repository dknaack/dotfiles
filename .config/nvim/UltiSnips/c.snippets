snippet "^inc" "^#include" rA
#include 
endsnippet

snippet "^#include as" "assert" rA
#include <assert.h>
endsnippet

snippet "^#include io" "stdio" rA
#include <stdio.h>
endsnippet

snippet "^#include li" "stdlib" rA
#include <stdlib.h>
endsnippet

snippet "^#include ar" "stdarg" rA
#include <stdarg.h>
endsnippet

snippet "^#include bo" "stdbool" rA
#include <stdbool.h>
endsnippet

snippet "^#include de" "stddef" rA
#include <stddef.h>
endsnippet

snippet "^#include st" "string" rA
#include <string.h>
endsnippet

snippet "^#include ti" "time" rA
#include <time.h>
endsnippet

snippet "^#include un" "unistd" rA
#include <unistd.h>
endsnippet

snippet "^#include vk" "vulkan" rA
#include <vulkan/vulkan.h>
endsnippet

snippet "^#include ma" "math" rA
#include <math.h>
endsnippet

snippet "^#include in" "stdint" rA
#include <stdint.h>
endsnippet

snippet "^#include er" "errno" rA
#include <errno.h>
endsnippet

snippet "^#include fc" "fcntl" rA
#include <fcntl.h>
endsnippet

snippet "^#include sy" "fcntl" rA
#include <sys/
endsnippet

snippet "^#include ct" "ctype" rA
#include <ctype.h>
endsnippet

snippet "^#include dl" "dlfcn" rA
#include <dlfcn.h>
endsnippet

snippet '^main' "main" rA
int
main(void)
{
	$0
	return 0;
}
endsnippet

snippet die "die function"
void
die(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);

	if (fmt[0] && fmt[strlen(fmt) - 1] == ':') {
		fputc(' ', stderr);
		perror(0);
	} else {
		fputc('\n', stderr);
	}

	exit(1);
}
endsnippet

snippet ecalloc "ecalloc function"
void *
ecalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (!(ptr = calloc(nmemb, size)))
		die("calloc:");

	return ptr;
}
endsnippet

snippet '^guard' "header include guard" rA
#ifndef $1_H
#define $1_H

$0

#endif /* $1_H */ `!p import re
if len(t[1]) > 0:
	t[1] = t[1].upper().replace(' ', '_').replace('.', '_')
`
endsnippet

snippet inttypes "int typedefs" w
typedef uintptr_t usz;
typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef intptr_t isz;
typedef int64_t i64;
typedef int32_t i32;
typedef int16_t i16;
typedef int8_t  i8;
endsnippet

snippet MAX "maximum macro" w
#define MAX(a, b) ((a) > (b)? (a) : (b))
endsnippet

snippet MIN "maximum macro" w
#define MIN(a, b) ((a) < (b)? (a) : (b))
endsnippet

snippet LENGTH "length macro" w
#define LENGTH(x) (sizeof(x)/sizeof((x)[0]))
endsnippet

snippet ABS "abs macro" w
#define ABS(x) ((x) < 0 ? -(x) : (x))
endsnippet

snippet SIGN "sign macro" w
#define SIGN(x) ((x) < 0 ? -1 : 1)
endsnippet

snippet CLAMP "clamp macro" w
#define CLAMP(x, a, b) MAX((a), MIN((b), (x)))
endsnippet

snippet CLAMP01 "clamp01 macro" w
#define CLAMP01(x) CLAMP((x), 0, 1)
endsnippet

snippet types "short types" w
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

typedef uintptr_t usz;
typedef uint64_t  u64;
typedef uint32_t  u32;
typedef uint16_t  u16;
typedef uint8_t   u8;

typedef intptr_t isz;
typedef int64_t  i64;
typedef int32_t  i32;
typedef int16_t  i16;
typedef int8_t   i8;

typedef double f64;
typedef float  f32;
endsnippet

snippet c_types "short hand typedefs for regular c types" b
typedef long long llong;
typedef signed char schar;

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
typedef unsigned long long ullong;
endsnippet

snippet _fast "fast for cp" bA
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#define MAX(a, b) ((a) > (b)? (a) : (b))
#define MIN(a, b) ((a) < (b)? (a) : (b))
#define LENGTH(x) (sizeof(x)/sizeof((x)[0]))

typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef int64_t i64;
typedef int32_t i32;
typedef int16_t i16;
typedef int8_t  i8;

typedef double f64;
typedef float  f32;

int
main(void)
{
	$0
}
endsnippet

snippet hash "djb2 hash function"
uint64_t
hash(const char *str)
{
	uint64_t hash = 5381;

	while (*str) {
		hash = hash << 5 + hash + *str++;
	}

	return hash;
}
endsnippet

snippet read_file "read a file"
void *
read_file(const char *filename, size_t *size)
{
	char *buffer = 0;
	FILE *file = fopen(filename, "rb");
	if (file) {
		fseek(file, 0, SEEK_END);
		*size = ftell(file);
		fseek(file, 0, SEEK_SET);

		buffer = calloc(*size + 1, 1);
		if (buffer) {
			fread(buffer, *size, 1, file);
			buffer[*size] = '\0';
		}

		fclose(file);
	}

	return buffer;
}
endsnippet

snippet write_file "function for writing to a file"
bool
write_file(const char *filename, void *data, size_t size)
{
	bool result = false;

	FILE *file = fopen(filename, "w");
	if (file) {
		if (fwrite(data, 1, size, file) == size) {
			result = true;
		}

		fclose(file);
	}

	return result;
}
endsnippet

snippet gl_shader_create "Utility function for creating OpenGL shaders" 
unsigned int
gl_shader_create(const char *src, GLenum type)
{
	unsigned int shader = glCreateShader(type);
	glShaderSource(shader, 1, &src, 0);
	glCompileShader(shader);

	int success;
	glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
	if (!success) {
		char info[1024];
		glGetShaderInfoLog(shader, sizeof(info), 0, info);
		fprintf(stderr, "gl_shader_create: %s\n", info);
	}

	return shader;
}
endsnippet

snippet gl_program_create "Utility function for creating OpenGL programs" 
unsigned int
gl_program_create(const char *vs, const char *fs)
{
	unsigned int vertex_shader = gl_shader_create(vs, GL_VERTEX_SHADER);
	if (vertex_shader) {
		return 0;
	}

	unsigned int fragment_shader = gl_shader_create(fs, GL_FRAGMENT_SHADER);
	if (!fragment_shader) {
		glDeleteShader(vertex_shader);
		return 0;
	}

	unsigned int program = glCreateProgram();
	glAttachShader(program, vertex_shader);
	glAttachShader(program, fragment_shader);
	glLinkProgram(program);

	glDeleteShader(vertex_shader);
	glDeleteShader(fragment_shader);

	int success;
	glGetProgramiv(program, GL_LINK_STATUS, &success);
	if (!success) {
		char info[1024];
		glGetProgramInfoLog(program, sizeof(info), 0, info);
		fprintf(stderr, "gl_program_create: %s\n", info);
	}

	return program;
}
endsnippet

snippet string "data type for string"
typedef struct string {
	char *at;
	${1:size_t} length;
} string;
endsnippet

snippet string_length "macro for the length of a string" 
${1:size_t}
string_length(char *at)
{
	$1 length = 0;

	while (at[length]) {
		length++;
	}

	return length;
}
endsnippet

snippet assert "Alternative assert for debugging" 
#define assert(expr) ((expr) ? (void)0 : (void)(*(volatile int *)0 = 0))
endsnippet

snippet assert_gcc "Alternative assert for debugging" 
#define assert(expr) ((expr) ? (void)0 : (void)__builtin_trap())
endsnippet

snippet KB "macros for kilobytes, megabytes, etc." 
#define KB(x)   ((x) * 1024)
#define MB(x) (KB(x) * 1024)
#define GB(x) (MB(x) * 1024)
#define TB(x) (GB(x) * 1024)
endsnippet
